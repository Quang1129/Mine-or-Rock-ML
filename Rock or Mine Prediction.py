# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qh2gIVOGa77cRb--Yf_Z-afWve6AMxb9
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

data = pd.read_csv("/content/drive/MyDrive/Rock or Mine/sonar_data.csv",header = None)
data



"""### Overview the dataset"""

data.isnull().sum()

data.info()

data.describe()

data.shape

values_count = data[60].value_counts()

values_count

visual_target = sns.countplot(x= data[60])

data.groupby(60).mean()



"""# Store the feature in X and the target in Y"""

x = data.drop(60, axis = 1)
x

y = data[60]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y,test_size = 0.2, random_state = 123)

from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

lr = LogisticRegression()
lr.fit(x_train, y_train)
y_pred1 = lr.predict(x_test)
accuracy = accuracy_score( y_pred1, y_test)
print(accuracy)

knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(x_train,y_train)
y_pred2 = knn.predict(x_test)
accuracy = accuracy_score(y_pred2, y_test)
print(accuracy)

rf = RandomForestClassifier()
rf.fit(x_train,y_train)
y_pred3 = rf.predict(x_test)
accuracy = accuracy_score(y_pred3,y_test)
print(accuracy)



"""#### We can see the KNN with the number of neighbor = 3 is the best , so we're gonna choose the KNN for the model

# Make a prediction
"""

input_data = (0.0188,0.037,	0.0953,	0.0824,	0.0249,	0.0488,	0.1424,	0.1972,	0.1873,	0.1806,	0.2139,	0.1523,	0.1975,	0.4844,	0.7298,	0.7807,	0.7906,	0.6122,	0.42,	0.2807,	0.5148,	0.7569,	0.8596,	1,	0.8457	,0.6797,	0.6971,	0.5843	,0.4772,	0.5201,	0.4241,	0.1592	,0.1668,	0.0588	,0.3967,0.714,0.7319,	0.3509,	0.0589,	0.269,	0.42,	0.3874,	0.244,	0.2,	0.2307,	0.1886,	0.196,	0.1701,	0.1366,	0.0398,	0.0143,	0.0093,	0.0033,	0.0113,	0.003,	0.0057,	0.009,	0.0057,	0.0068,	0.0024)
input_data_numpy_array = np.asarray(input_data)
input_data_reshape= input_data_numpy_array.reshape(1,-1)

prediction = knn.predict(input_data_reshape)
print(prediction)